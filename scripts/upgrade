#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
#REMOVEME? ynh_script_progression --message="Loading installation settings..." --weight=1

#REMOVEME? app=$YNH_APP_INSTANCE_NAME

#REMOVEME? domain=$(ynh_app_setting_get --app=$app --key=domain)
#REMOVEME? path=$(ynh_app_setting_get --app=$app --key=path)
#REMOVEME? #REMOVEME? install_dir=$(ynh_app_setting_get --app=$app --key=install_dir)
#REMOVEME? port=$(ynh_app_setting_get --app=$app --key=port)
#REMOVEME? salt=$(ynh_app_setting_get --app=$app --key=salt)
#REMOVEME? db_name=$(ynh_app_setting_get --app=$app --key=db_name)
#REMOVEME? db_user=$db_name
#REMOVEME? db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..." --weight=1

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
#REMOVEME? ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=1

# Backup the current version of the app
#REMOVEME? ynh_backup_before_upgrade
#REMOVEME? ynh_clean_setup () {
	# Restore it if the upgrade fails
#REMOVEME? 	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
#REMOVEME? ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path=systemd --line_match="Stopped"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Previous versions did not set the DB name as a setting, so we need to set it now (will be used on
# remove).
if [ -z "$db_name" ]
then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
#REMOVEME? 	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
	db_user=$db_name
fi

# If install_dir doesn't exist, create it
if [ -z "$install_dir" ]
then
#REMOVEME? 	install_dir=/var/www/$app
#REMOVEME? 	ynh_app_setting_set "$app" install_dir "$install_dir"
fi

if [ -d "/home/ynh$app" ]
then
	mv "/home/ynh$app/data" "$install_dir/data"
	ynh_secure_remove --file="/home/ynh$app"
fi

if [ -z "$salt" ]
then
	salt=$(ynh_string_random 40)
	ynh_app_setting_set "$app" salt "$salt"
fi

usermod -d $install_dir $app

#=================================================
# CREATE DEDICATED USER
#=================================================
#REMOVEME? ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
#REMOVEME? ynh_system_user_create --username=$app --home_dir="$install_dir"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	tmpdir="$(mktemp -d)"
	cp "$install_dir/config.ini" "$tmpdir/config.ini"
#REMOVEME? 	ynh_secure_remove --file="$install_dir"

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir"

	cp "$tmpdir/config.ini" "$install_dir/config.ini"
	ynh_secure_remove --file="$tmpdir"

	mkdir -p "$install_dir/data"
fi

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
#REMOVEME? ynh_script_progression --message="Upgrading dependencies..." --weight=1

#REMOVEME? ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version
#REMOVEME? ynh_exec_warn_less ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

# Now that postgresql is installed, check the db exists and the user is set up
if [ -z "$db_pwd" ]
then
	ynh_script_progression --message="Setting up database"
#REMOVEME? 	ynh_psql_test_if_first_run
#REMOVEME? 	ynh_psql_setup_db --db_user=$db_user --db_name=$db_name
#REMOVEME? 	db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# INSTALL WOOB WITH PIP
#=================================================
ynh_script_progression --message="Installing woob..." --weight=1

locale-gen C.UTF-8
update-locale C.UTF-8
ynh_secure_remove --file="${install_dir}/venv"
ynh_exec_as $app virtualenv --python=python3 --system-site-packages "${install_dir}/venv"
(
	set +o nounset
	source "${install_dir}/venv/bin/activate"
	set -o nounset

	ynh_exec_warn_less ynh_exec_as $app RUSTUP_HOME="$install_dir"/.rustup CARGO_HOME="$install_dir"/.cargo bash -c 'curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -q -y'
	export PATH="$install_dir/.cargo/bin:$PATH"
	ynh_exec_warn_less ynh_exec_as $app env PATH=$PATH pip install --upgrade pip
	ynh_exec_warn_less ynh_exec_as $app env PATH=$PATH pip install --upgrade setuptools
	ynh_exec_warn_less ynh_exec_as $app env PATH=$PATH pip install woob simplejson BeautifulSoup4 PyExecJS typing-extensions pdfminer.six Pillow --ignore-installed
#REMOVEME? 	ynh_secure_remove --file="$install_dir/.cargo"
#REMOVEME? 	ynh_secure_remove --file="$install_dir/.rustup"
#REMOVEME? 	ynh_secure_remove --file="$install_dir/.cache"
#REMOVEME? 	ynh_secure_remove --file="$install_dir/.local"
)

#=================================================
# INSTALL KRESUS WITH NPM
#=================================================
ynh_script_progression --message="Installing app..." --weight=1

ynh_use_nodejs
(
	cd "$install_dir"

	# In case of nodejs upgrade, remove the current node_modules to make sure there are no errors
	# linked to modules compiled for the previous version.
#REMOVEME? 	ynh_secure_remove --file="$install_dir/node_modules"

	ynh_exec_warn_less ynh_exec_as $app env $ynh_node_load_PATH yarn install
	ynh_exec_warn_less ynh_exec_as $app env $ynh_node_load_PATH yarn cache clean --all
#REMOVEME? 	ynh_secure_remove --file="$install_dir/.cache"
#REMOVEME? 	ynh_secure_remove --file="$install_dir/.yarn"
)

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

ynh_add_config --template="../conf/config.ini" --destination="$install_dir/config.ini"

chmod 400 "$install_dir/config.ini"
chown $app:$app "$install_dir/config.ini"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

mkdir -p "/var/log/$app/"
touch "/var/log/$app/$app.log"
chown -R $app:$app "/var/log/$app/"
# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path=systemd --line_match="Server is ready"

#=================================================
# RELOAD NGINX
#=================================================
#REMOVEME? ynh_script_progression --message="Reloading NGINX web server..." --weight=1

#REMOVEME? ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# SEND README TO ADMIN
#=================================================
ynh_script_progression --message="Sending ReadMe to admin..." --weight=1

message="
Kresus was successfully updated!

Domain: $domain
Path  : $path
Config: $install_dir/config.ini

Note about config.ini: this package will regenerate the config file on upgrade.
If you changed it manually and upgrade Kresus, you'll find a backup in $install_dir.

Are you facing an issue, want to improve this app or say thank you?
Please open a new issue in this project: https://github.com/YunoHost-Apps/kresus_ynh
"
ynh_send_readme_to_admin "$message"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
